package sughoshmasterthesis.com.watchcontroller;

import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import com.zeiss.sughoshkumar.senderobject.SenderObject;
import java.io.IOException;

/**
 * Class that interprets the touch on the screen and sends
 * the corresponding coordinate values to the glasses.
 */
public class TouchMouse implements View.OnTouchListener {

    private float prevX, prevY, initX, initY, sendX, sendY;
    private static final float SCROLL_THRESHOLD = 0.4f;
    private static long mDeBounce;
    private static boolean mIsScrolling;
    private VelocityTracker velocityTracker;

    public TouchMouse(){
        mIsScrolling = false;
        mDeBounce = 0;
    }


    /**
     * On touch method from OnTouchListener class
     * @param v VIEW TOUCH.
     * @param event EVENT GENERATED BY TOUCH.
     * @return TRUE IF THE THE EVENT IS CONSUMED.
     */

    @Override
    public boolean onTouch(View v, MotionEvent event) {
        switch (event.getAction()){
            case MotionEvent.ACTION_DOWN:
                WearMainActivity.thread.onPause();
                initX = event.getX();
                initY = event.getY();
                mDeBounce = event.getEventTime();
                return true;

            case MotionEvent.ACTION_MOVE:
                WearMainActivity.thread.onPause();
                sendX = initX - event.getX();
                sendY = initY - event.getY();
                if ( Math.abs(sendX) > SCROLL_THRESHOLD || Math.abs(sendY) > SCROLL_THRESHOLD) {
                    mIsScrolling = true;
                    try {
                        //noinspection SuspiciousNameCombination
                        sendCurrentPosition(sendY, sendX);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                initX = event.getX();
                initY = event.getY();

                return true;
            case MotionEvent.ACTION_UP:
                if (((event.getEventTime() - mDeBounce) < 400 && event.getPointerCount() == 1) && (!mIsScrolling)) {
                    try {
                        onSingleTap();
                        WearMainActivity.thread.onResume();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    sendX = 0;
                    sendY = 0;
                    initY = 0;
                    initX = 0;
                    return true;
                }
                else {
                    try {
                        onZeroingPosition();
                        WearMainActivity.thread.onResume();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    mIsScrolling = false;
                    sendX = 0;
                    sendY = 0;
                    initY = 0;
                    initX = 0;
                    return true;
                }
            default:
                return false;
        }
    }


    /**
     * Sends a null type object to reset coordinates through UDP
     * @throws IOException encoding the SenderObject to bytes
     */
    private void onZeroingPosition() throws IOException {
        if(WearMainActivity.isConnected) {
            SenderObject senderObject = new SenderObject(0, 0, 1, SenderObject.TOUCH_MODALITY);
            new UDPClient(senderObject.toBytes()).execute();
        }
    }

    /**
     * Send on tap event to the glass through UDP
     * @throws IOException encoding the SenderObject to bytes
     */
    private void onSingleTap() throws IOException {
        if (WearMainActivity.isConnected) {
            SenderObject senderObject = new SenderObject(0, 0, 2, SenderObject.TOUCH_MODALITY);
            new UDPClient(senderObject.toBytes()).execute();
        }
    }

    /**
     * Send the current cursor movement values to through UDP
     * @throws IOException encoding the SenderObject to bytes
     */
    private void sendCurrentPosition(float x, float y) throws IOException {
        if (WearMainActivity.isConnected) {
            SenderObject senderObject = new SenderObject(x, y * -1, 1, SenderObject.TOUCH_MODALITY);
            System.out.println("Touch Difference : " + senderObject.toString());
            new UDPClient(senderObject.toBytes()).execute();
        }
    }
}
